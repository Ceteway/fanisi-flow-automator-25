/*
  # Add HTML Templates to System Templates

  1. New Templates
    - Agreement to Lease - Safaricom BTS (HTML template)
    - Lease Agreement - Safaricom BTS (HTML template) 
    - Licence Agreement - Peppercorn (HTML template)
    - Letter of Offer - Site Acquisition (HTML template)

  2. Template Data
    - All templates are stored as base64-encoded HTML files
    - Templates include fillable fields and professional formatting
    - Categories assigned appropriately (agreements/letters)
*/

-- Insert Agreement to Lease template
INSERT INTO public.system_templates (
  name,
  description,
  category,
  file_name,
  content_type,
  file_data,
  is_active
) VALUES (
  'Agreement to Lease - Safaricom BTS',
  'Professional fillable Agreement to Lease template for Safaricom Base Transceiver Station installations. Includes all standard clauses, definitions, and signature sections.',
  'agreements',
  'Agreement_to_Lease_Template.html',
  'text/html',
  decode('PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KPGhlYWQ+CiAgPG1ldGEgY2hhcnNldD0idXRmLTgiIC8+CiAgPHRpdGxlPkFncmVlbWVudCB0byBMZWFzZSDigJMgRmlsbGFibGUgVGVtcGxhdGU8L3RpdGxlPgogIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MSIgLz4KICA8c3R5bGU+CiAgICA6cm9vdCB7CiAgICAgIC0tdGV4dDogIzExMTsKICAgICAgLS1tdXRlZDogIzY2NjsKICAgICAgLS1hY2NlbnQ6ICMwMDRiOGQ7CiAgICAgIC0tZmlsbC1ib3JkZXI6ICM3Nzc7CiAgICAgIC0tZmlsbC1iZzogI2ZmZjhjYzsKICAgIH0KICAgIGh0bWwsIGJvZHkgewogICAgICBtYXJnaW46IDA7CiAgICAgIHBhZGRpbmc6IDA7CiAgICAgIGNvbG9yOiB2YXIoLS10ZXh0KTsKICAgICAgZm9udDogMTJwdCAiVGltZXMgTmV3IFJvbWFuIiwgVGltZXMsIHNlcmlmOwogICAgICBsaW5lLWhlaWdodDogMS4yNTsKICAgICAgYmFja2dyb3VuZDogI2ZmZjsKICAgIH0KICAgIG1haW4gewogICAgICBtYXgtd2lkdGg6IDgwMHB4OwogICAgICBtYXJnaW46IDI0cHggYXV0byA5NnB4IGF1dG87CiAgICAgIHBhZGRpbmc6IDAgMjRweDsKICAgIH0KICAgIGhlYWRlciwgc2VjdGlvbiB7CiAgICAgIG1hcmdpbi1ib3R0b206IDE4cHg7CiAgICB9CiAgICBoMSwgaDIsIGgzLCBoNCB7CiAgICAgIG1hcmdpbjogMCAwIDhweCAwOwogICAgICBmb250LXdlaWdodDogNzAwOwogICAgICBjb2xvcjogdmFyKC0tdGV4dCk7CiAgICB9CiAgICBoMSB7IGZvbnQtc2l6ZTogMThwdDsgdGV4dC1hbGlnbjogY2VudGVyOyB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlOyBsZXR0ZXItc3BhY2luZzogLjVweDsgfQogICAgaDIgeyBmb250LXNpemU6IDE0LjVwdDsgbWFyZ2luLXRvcDogMThweDsgfQogICAgaDMgeyBmb250LXNpemU6IDEzcHQ7IG1hcmdpbi10b3A6IDE0cHg7IH0KICAgIGg0IHsgZm9udC1zaXplOiAxMi41cHQ7IG1hcmdpbi10b3A6IDEwcHg7IH0KICAgIHAgeyBtYXJnaW46IDZweCAwOyB0ZXh0LWFsaWduOiBqdXN0aWZ5OyB9CiAgICAuY2VudGVyIHsgdGV4dC1hbGlnbjogY2VudGVyOyB9CiAgICAuc21hbGwgeyBmb250LXNpemU6IDEwcHQ7IGNvbG9yOiB2YXIoLS1tdXRlZCk7IH0KICAgIC5tdXRlZCB7IGNvbG9yOiB2YXIoLS1tdXRlZCk7IH0KICAgIC5jYXBzIHsgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTsgbGV0dGVyLXNwYWNpbmc6IC4zcHg7IH0KCiAgICAvKiBOdW1iZXJlZCBjbGF1c2VzICovCiAgICBvbC5jbGF1c2VzIHsgY291bnRlci1yZXNldDogaXRlbTsgbGlzdC1zdHlsZTogbm9uZTsgbWFyZ2luOiAwOyBwYWRkaW5nOiAwOyB9CiAgICBvbC5jbGF1c2VzID4gbGkgewogICAgICBjb3VudGVyLWluY3JlbWVudDogaXRlbTsKICAgICAgbWFyZ2luOiA2cHggMDsKICAgIH0KICAgIG9sLmNsYXVzZXMgPiBsaSA+IC5udW06OmJlZm9yZSB7CiAgICAgIGNvbnRlbnQ6IGNvdW50ZXIoaXRlbSkgIi4gIjsKICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgICB9CiAgICAuaW5kZW50IHsgbWFyZ2luLWxlZnQ6IDE4cHg7IH0KCiAgICAvKiBGaWxsYWJsZSBmaWVsZHMgKi8KICAgIC5maWxsIHsKICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrOwogICAgICBtaW4td2lkdGg6IDIuMmVtOwogICAgICBwYWRkaW5nOiAxcHggM3B4OwogICAgICBib3JkZXItYm90dG9tOiAxcHggZG90dGVkIHZhcigtLWZpbGwtYm9yZGVyKTsKICAgICAgYmFja2dyb3VuZDogdmFyKC0tZmlsbC1iZyk7CiAgICAgIG91dGxpbmU6IG5vbmU7CiAgICAgIGN1cnNvcjogdGV4dDsKICAgIH0KICAgIC5maWxsW2NvbnRlbnRlZGl0YWJsZT0idHJ1ZSJdOmVtcHR5OjpiZWZvcmUgeyBjb250ZW50OiBhdHRyKGRhdGEtcGgpOyBjb2xvcjogIzk5OTsgfQogICAgLmJsb2NrLWZpbGwgewogICAgICBkaXNwbGF5OiBibG9jazsKICAgICAgbWluLWhlaWdodDogMS4yZW07CiAgICAgIHBhZGRpbmc6IDJweCA0cHg7CiAgICAgIGJvcmRlci1ib3R0b206IDFweCBkb3R0ZWQgdmFyKC0tZmlsbC1ib3JkZXIpOwogICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1maWxsLWJnKTsKICAgICAgbWFyZ2luOiAycHggMCA4cHggMDsKICAgIH0KICAgIC5zcGFjZXIgeyBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IG1pbi13aWR0aDogLjc1ZW07IH0KICAgIC51IHsgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIGN1cnJlbnRDb2xvcjsgfQoKICAgIC8qIFRhYmxlcyAqLwogICAgdGFibGUgeyB3aWR0aDogMTAwJTsgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTsgbWFyZ2luOiA4cHggMCAxMnB4IDA7IH0KICAgIHRoLCB0ZCB7IGJvcmRlcjogMXB4IHNvbGlkICMzMzM7IHBhZGRpbmc6IDZweCA4cHg7IHZlcnRpY2FsLWFsaWduOiB0b3A7IH0KICAgIHRoIHsgYmFja2dyb3VuZDogI2Y0ZjRmNDsgdGV4dC1hbGlnbjogbGVmdDsgfQogICAgLm5vLWJvcmRlciB7IGJvcmRlcjogbm9uZTsgfQoKICAgIC8qIFNpZ25hdHVyZXMgKi8KICAgIC5zaWctZ3JpZCB7IHdpZHRoOiAxMDAlOyBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlOyBtYXJnaW4tdG9wOiAxMHB4OyB9CiAgICAuc2lnLWNlbGwgeyB3aWR0aDogNTAlOyBwYWRkaW5nOiAxMnB4OyBib3JkZXI6IDFweCBzb2xpZCAjMzMzOyB2ZXJ0aWNhbC1hbGlnbjogdG9wOyB9CiAgICAubGluZSB7IGRpc3BsYXk6IGJsb2NrOyBib3JkZXItYm90dG9tOiAxcHggc29saWQgIzAwMDsgaGVpZ2h0OiAxcHg7IG1hcmdpbjogMThweCAwIDZweDsgfQogICAgLmxhYmVsIHsgZm9udC1zaXplOiAxMHB0OyBjb2xvcjogdmFyKC0tbXV0ZWQpOyB9CgogICAgLyogSW5zdHJ1Y3Rpb24gcGFuZWwgKHNjcmVlbi1vbmx5KSAqLwogICAgLmluc3RydWN0aW9ucyB7CiAgICAgIGJvcmRlcjogMXB4IHNvbGlkICNjYmQ1ZTE7CiAgICAgIGJhY2tncm91bmQ6ICNmOGZhZmM7CiAgICAgIHBhZGRpbmc6IDEwcHggMTJweDsKICAgICAgbWFyZ2luOiAwIDAgMTZweCAwOwogICAgICBmb250LXNpemU6IDEwLjVwdDsKICAgIH0KCiAgICAvKiBQcmludCBzdHlsZXMgKi8KICAgIEBtZWRpYSBwcmludCB7CiAgICAgIC5pbnN0cnVjdGlvbnMgeyBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7IH0KICAgICAgLmZpbGwsIC5ibG9jay1maWxsIHsgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQgIWltcG9ydGFudDsgfQogICAgICBhIHsgY29sb3I6IGJsYWNrOyB0ZXh0LWRlY29yYXRpb246IG5vbmU7IH0KICAgICAgbWFpbiB7IG1hcmdpbjogMDsgcGFkZGluZzogMDsgfQogICAgfQogIDwvc3R5bGU+CjwvaGVhZD4KPGJvZHk+CiAgPG1haW4+CiAgICA8c2VjdGlvbiBjbGFzcz0iaW5zdHJ1Y3Rpb25zIj4KICAgICAgPGgzPkZpbGxhYmxlIEZpZWxkczwvaDM+CiAgICAgIDxwPlBsZWFzZSBmaWxsIGluIHRoZSBmb2xsb3dpbmcgZGV0YWlsczogL3A+CiAgICAgIDxsYWJlbCBmb3I9ImxhbmRsb3JkTmFtZSI+TGFuZGxvcmQncyBGdWxsIExlZ2FsIE5hbWU6PC9sYWJlbD4KICAgICAgPGlucHV0IHR5cGU9InRleHQiIGlkPSJsYW5kbG9yZE5hbWUiIGNsYXNzPSJmaWxsIiBjb250ZW50ZWRpdGFibGU9InRydWUiIGRhdGEtcGg9IltMYW5kbG9yZCBmdWxsIGxlZ2FsIG5hbWVdIj48YnI+PGJyPgoKICAgICAgPGxhYmVsIGZvcj0ibHJObyI+TFIgTm8uIChMYW5kIFJlZmVyZW5jZSBOdW1iZXIpOjwvbGFiZWw+CiAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBpZD0ibHJObyIgY2xhc3M9ImZpbGwiIGNvbnRlbnRlZGl0YWJsZT0idHJ1ZSIgZGF0YS1waD0iW0xSIE5vLl0iPjxicj48YnI+CgogICAgICA8bGFiZWwgZm9yPSJmaXJtQWR2b2NhdGUiPkZpcm0gLyBBZHZvY2F0ZTo8L2xhYmVsPgogICAgICA8aW5wdXQgdHlwZT0idGV4dCIgaWQ9ImZpcm1BZHZvY2F0ZSIgY2xhc3M9ImZpbGwiIGNvbnRlbnRlZGl0YWJsZT0idHJ1ZSIgZGF0YS1waD0iW0Zpcm0gLyBBZHZvY2F0ZV0iPjxicj48YnI+CgogICAgICA8bGFiZWwgZm9yPSJkYXkiPkRheTo8L2xhYmVsPgogICAgICA8aW5wdXQgdHlwZT0idGV4dCIgaWQ9ImRheSIgY2xhc3M9ImZpbGwiIGNvbnRlbnRlZGl0YWJsZT0idHJ1ZSIgZGF0YS1waD0iW2RheV0iPjxicj48YnI+CgogICAgICA8bGFiZWwgZm9yPSJtb250aCI+TW9udGg6PC9sYWJlbD4KICAgICAgPGlucHV0IHR5cGU9InRleHQiIGlkPSJtb250aCIgY2xhc3M9ImZpbGwiIGNvbnRlbnRlZGl0YWJsZT0idHJ1ZSIgZGF0YS1waD0iW21vbnRoXSI+PGJyPjxicj4KCiAgICAgIDxsYWJlbCBmb3I9InllYXIiPllVZXI6PC9sYWJlbD4KICAgICAgPGlucHV0IHR5cGU9InRleHQiIGlkPSJ5ZWFyIiBjbGFzcz0iZmlsbCIgY29udGVudGVkaXRhYmxlPSJ0cnVlIiBkYXRhLXBoPSJbWVldIj48YnI+PGJyPgogICAgICA8YnV0dG9uIGlkPSJkb3dubG9hZFdvcmQiPkRvd25sb2FkIGFzIFdvcmQ8L2J1dHRvbj4KICAgICAgPGJ1dHRvbiBpZD0iZG93bmxvYWRQZGYiPkRvd25sb2FkIGFzIFBERjwvYnV0dG9uPgogICAgPC9zZWN0aW9uPgogICAgPGhlYWRlcj4KICAgICAgPGgxPkFncmVlbWVudCB0byBMZWFzZTwvaDE+CiAgICAgIDxwIGNsYXNzPSJjZW50ZXIiPgogICAgICAgIGZyb20KICAgICAgICA8c3BhbiBjbGFzcz0iZmlsbCIgY29udGVudGVkaXRhYmxlPSJ0cnVlIiBkYXRhLXBoPSJbTGFuZGxvcmQgZnVsbCBsZWdhbCBuYW1lXSI+PC9zcGFuPgogICAgICAgIChhcyB0aGUgIkxhbmRsb3JkIik8YnIvPgogICAgICAgIHRvPGJyLz4KICAgICAgICA8c3Ryb25nPlNhZmFyaWNvbSBQTEM8L3N0cm9uZz4gKGFzIHRoZSAiVGVuYW50Iik8YnIvPgogICAgICAgIG92ZXI8YnIvPgogICAgICAgIFBhcnQgb2YgUHJvcGVydHkgTGFuZCBSZWZlcmVuY2UgTnVtYmVyOgogICAgICAgIDxzcGFuIGNsYXNzPSJmaWxsIiBjb250ZW50ZWRpdGFibGU9InRydWUiIGRhdGEtcGg9IltMUiBOby5dIj48L3NwYW4+CiAgICAgIDwvcD4KICAgICAgPHAgY2xhc3M9Im11dGVkIj5EcmF3biBieTogLSA8c3BhbiBjbGFzcz0iZmlsbCIgY29udGVudGVkaXRhYmxlPSJ0cnVlIiBkYXRhLXBoPSJbRmlybSAvIEFkdm9jYXRlXSI+PC9zcGFuPjwvcD4KICAgICAgPHA+VEhJUyBBR1JFRU1FTlQgaXMgbWFkZSB0aGlzCiAgICAgICAgPHNwYW4gY2xhc3M9ImZpbGwiIGNvbnRlbnRlZGl0YWJsZT0idHJ1ZSIgZGF0YS1waD0iW2RheV0iPjwvc3Bhbj4KICAgICAgICBkYXkgb2YKICAgICAgICA8c3BhbiBjbGFzcz0iZmlsbCIgY29udGVudGVkaXRhYmxlPSJ0cnVlIiBkYXRhLXBoPSJbbW9udGhdIj48L3NwYW4+CiAgICAgICAgMjA8c3BhbiBjbGFzcz0iZmlsbCIgY29udGVudGVkaXRhYmxlPSJ0cnVlIiBkYXRhLXBoPSJbWVldIj48L3NwYW4+CiAgICAgIDwvcD4KICAgICAgPHA+PHN0cm9uZz5CRVRXRUVOPC9zdHJvbmc+PC9wPgogICAgICA8cD4oMSkgUGVyc29uIG5hbWVkIGluIHRoZSBGaXJzdCBTY2hlZHVsZSBhcyB0aGUgTGFuZGxvcmQgd2hvc2UgcG9zdGFsIGFkZHJlc3MgaXMgc3RhdGVkICgidGhlIExhbmRsb3JkIik7PC9wPgogICAgICA8cD4oMikgPHN0cm9uZz5TQUZBUklDT00gUExDPC9zdHJvbmc+IG9mIFAuIE8uIEJveCBOdW1iZXIgNjY4MjctMDA4MDAgTmFpcm9iaSBLZW55YSAoIlRoZSBUZW5hbnQiKS48L3A+CiAgICAgIDxwPjxzdHJvbmc+Tk9XIElUIElTIEFHUkVFRCBhcyBmb2xsb3dzOi08L3N0cm9uZz48L3A+CiAgICA8L2hlYWRlcj4KCiAgICA8c2VjdGlvbj4KICAgICAgPGgyPkRlZmluaXRpb25zIGFuZCBJbnRlcnByZXRhdGlvbjwvaDI+CiAgICAgIDxwPkluIHRoaXMgQWdyZWVtZW50IHRoZSBmb2xsb3dpbmcgZXhwcmVzc2lvbnMgc2hhbGwgbWVhbjo8L3A+CiAgICAgIDxwPjxzdHJvbmc+IkFwcGFyYXR1cyI8L3N0cm9uZz4gbWVhbnMgdGhlIHRvd2VycyBhbnRlbm5hZSBkaXNoIGFudGVubmFlIHRoZSBlcXVpcG1lbnQgY2FiaW4gZ2VuZXJhdG9yIGhvdXNlIHN1cHBvcnQgc3RydWN0dXJlcyBmaXhpbmcgYXBwYXJhdHVzIHdpdGggc3VjaCBwb3dlciBzdXBwbHkgZXF1aXBtZW50IGNhYmxlcyB3aXJlcyBhbmQgY29uZHVpdHMgYXMgYXJlIHJlYXNvbmFibHkgcmVxdWlyZWQgZm9yIHRoZSBQZXJtaXR0ZWQgVXNlIGluY2x1ZGluZyBidXQgbm90IGxpbWl0ZWQgdG8gYW4gZWxlY3RyaWMgbGluZSBhbmQvb3IgZmlicmUgY2FibGUgZWl0aGVyIG92ZXJoZWFkIG9yIHVuZGVyZ3JvdW5kIG9yIGFzIG1heSBvdGhlcndpc2UgYmUgcmVxdWlyZWQgb2YgdGhlIHR5cGVzIGlsbHVzdHJhdGVkIG9uIHRoZSBkcmF3aW5ncyBhdHRhY2hlZCB0byB0aGlzIEFncmVlbWVudCB3aGljaCBzaGFsbCBhdCBhbGwgdGltZXMgcmVtYWluIHRoZSBleGNsdXNpdmUgcHJvcGVydHkgb2YgdGhlIFRlbmFudC48L3A+CiAgICAgIDxwPjxzdHJvbmc+IkNvbW1lbmNlbWVudCBEYXRlIjwvc3Ryb25nPiBtZWFucyB0aGUgZGF0ZSBzcGVjaWZpZWQgaW4gdGhlIEZpcnN0IFNjaGVkdWxlLjwvcD4KICAgICAgPHA+PHN0cm9uZz4iTGFuZGxvcmQiPC9zdHJvbmc+IGluY2x1ZGVzIHRoZSBMYW5kbG9yZCdzIHN1Y2Nlc3NvcnMgaW4gdGl0bGUgdG8gdGhlIFByZW1pc2VzLCBhbmQgYW55IG90aGVyIHBlcnNvbiB3aG8gaXMgYXQgYW55IHRpbWUgZW50aXRsZWQgdG8gdGhlIHJldmVyc2lvbiBpbW1lZGlhdGVseSBleHBlY3RhbnQgb24gdGhlIHRlcm0gYW50aWNpcGF0ZWQgaGVyZXVuZGVyIHRvIGJlIGdyYW50ZWQgYnkgdGhlIExlYXNlLjwvcD4KICAgICAgPHA+PHN0cm9uZz4iTGVhc2UiPC9zdHJvbmc+IG1lYW5zIGEgbGVhc2Ugb2YgdGhlIFByZW1pc2VzIGluIHRoZSBmb3JtIGFubmV4ZWQgaW4gdGhlIFNlY29uZCBTY2hlZHVsZSBzdWJqZWN0IHRvIHN1Y2ggYW1lbmRtZW50cyBhbmQgYWRkaXRpb25zIGFzIG1heSBiZSByZXF1aXJlZCBieSB0aGUgZm9ybSBvZiB0aGUgZG9jdW1lbnRzIG9mIHRpdGxlIGFuZCBzdWNoIG1vZGlmaWNhdGlvbnMgdG8gdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBQcmVtaXNlcyBhcyBtYXkgYmUgbXV0dWFsbHkgYWdyZWVkIGluIHdyaXRpbmcgYmV0d2VlbiB0aGUgTGFuZGxvcmQgYW5kIHRoZSBUZW5hbnQuPC9wPgogICAgICA8cD4KICA8L3NlY3Rpb24+CgogICAgPHNlY3Rpb24+CiAgICAgIDxoMj5UaGUgTGVhc2U8L2gyPgogICAgICA8b2wgY2xhc3M9ImNsYXVzZXMiPgogICAgICAgIDxsaT4KICAgICAgICAgIDxzcGFuIGNsYXNzPSJudW0iPjwvc3Bhbj48c3Bhbj5UaGUgTGFuZGxvcmQgc2hhbGwgYXMgc29vbiBhcyBpcyBwcmFjdGljYWJsZSBncmFudCBhbmQgdGhlIFRlbmFudCBzaGFsbCBhY2NlcHQgdGhlIExlYXNlIGFuZCB0aGUgcGFydGllcyBzaGFsbCBleGVjdXRlIGEgY291bnRlcnBhcnQgb2YgaXQuPC9zcGFuPgogICAgICAgIDwvbGk+CiAgICAgIDwvb2w+CiAgICA8L3NlY3Rpb24+CgogICAgPHNlY3Rpb24+CiAgICAgIDxoMj5WYWNhbnQgUG9zc2Vzc2lvbiBhbmQgUmVudDwvaDI+CiAgICAgIDxwPlZhY2FudCBQb3NzZXNzaW9uIG9mIHRoZSBQcmVtaXNlcyBzaGFsbCBiZSBnaXZlbiB0byB0aGUgVGVuYW50IG9uLCBhbmQgdGhlIFJlbnQgc2hhbGwgYmUgcGF5YWJsZSB3aXRoIGVmZmVjdCBmcm9tLCB0aGUgQ29tbWVuY2VtZW50IERhdGUuPC9wPgogICAgPC9zZWN0aW9uPgoKICAgIDxzZWN0aW9uPgogICAgICA8aDI+VXNlPC9oMj4KICAgICAgPHA+VXBvbiBleGVjdXRpb24gb2YgdGhpcyBBZ3JlZW1lbnQgdGhlIFRlbmFudCBzaGFsbCBoYXZlIHRoZSByaWdodCB0byBjb21tZW5jZSB0aGUgV29ya3MuPC9wPgogICAgPC9zZWN0aW9uPgoKICAgIDxzZWN0aW9uPgogICAgICA8aDI+V2FycmFudHk8L2gyPgogICAgICA8cD5UaGUgTGFuZGxvcmQgd2FycmFudHMgdGhhdCBoZS9zaGUvaXQgaGFzIHByb3ByaWV0YXJ5IGludGVyZXN0IGFuZC9vciBsZWdhbCB0aXRsZSB0byB0aGUgUHJlbWlzZXMgYW5kIGhhcyBvYnRhaW5lZCB0aGUgY29uc2VudCBvZiBhbnkgbW9ydGdhZ2VlIG9yIG90aGVyIHRoaXJkIHBhcnR5IG5lY2Vzc2FyeSB0byBhbGxvdyBoaW0vaGVyL2l0IHRvIGVudGVyIGludG8gdGhpcyBBZ3JlZW1lbnQuPC9wPgogICAgPC9zZWN0aW9uPgoKICAgIDxzZWN0aW9uPgogICAgICA8aDI+QWNjZXNzPC9oMj4KICAgICAgPHA+VXBvbiBleGVjdXRpb24gb2YgdGhpcyBBZ3JlZW1lbnQgdGhlIFRlbmFudCAoYW5kIGFsbCBwZXJzb25zIGF1dGhvcml6ZWQgYnkgdGhlIFRlbmFudCkgc2hhbGwgYmUgZnJlZSB0byBjb21tZW5jZSB0aGUgV29ya3MgYW5kIHNoYWxsIGhhdmUgcmlnaHQgYXQgYWxsIHRpbWVzLjwvcD4KICAgIDwvc2VjdGlvbj4KCiAgICA8c2VjdGlvbj4KICAgICAgPGgyPlRlcm1pbmF0aW9uPC9oMj4KICAgICAgPHA+VGhlIFRlbmFudCBtYXkgdGVybWluYXRlIHRoaXMgQWdyZWVtZW50IHdpdGggaW1tZWRpYXRlIGVmZmVjdCB1cG9uIHdyaXR0ZW4gbm90aWNlLjwvcD4KICAgIDwvc2VjdGlvbj4KCiAgICA8c2VjdGlvbj4KICAgICAgPGgyPkJyZWFjaDwvaDI+CiAgICAgIDxwPlRoZSBMYW5kbG9yZCBzaGFsbCBiZSBlbnRpdGxlZCB0byB0ZXJtaW5hdGUgdGhpcyBBZ3JlZW1lbnQgaWYgaXQgaGFzIHNlcnZlZCBvbiBUaGUgVGVuYW50IGEgcHJpb3Igd3JpdHRlbiBub3RpY2Ugc3BlY2lmeWluZyBhbnkgc3Vic3RhbnRpYWwgYnJlYWNoLjwvcD4KICAgIDwvc2VjdGlvbj4KCiAgICA8c2VjdGlvbj4KICAgICAgPGgyPk5vdGljZXM8L2gyPgogICAgICA8cD5Bbnkgbm90aWNlIG9yIG90aGVyIGNvbW11bmljYXRpb24gYmlsbCBvciBzdGF0ZW1lbnQgcHJvdmlkZWQgZm9yIGJ5IHRoaXMgQWdyZWVtZW50IHNoYWxsIGJlIGluIHdyaXRpbmcuPC9wPgogICAgPC9zZWN0aW9uPgoKICAgIDxzZWN0aW9uPgogICAgICA8aDI+QXJiaXRyYXRpb248L2gyPgogICAgICA8cD5TYXZlIGFzIG1heSBiZSBvdGhlcndpc2UgcHJvdmlkZWQsIGFueSBkaXNwdXRlIG5vdCBtdXR1YWxseSBzZXR0bGVkIGJldHdlZW4gdGhlIHBhcnRpZXMgc2hhbGwgYmUgcmVmZXJyZWQgdG8gQXJiaXRyYXRpb24uPC9wPgogICAgPC9zZWN0aW9uPgoKICAgIDxzZWN0aW9uPgogICAgICA8aDI+VkFUIGFuZCBvdGhlciBUYXhlcyBBc3Nlc3NtZW50cyBhbmQgQ2hhcmdlczwvaDI+CiAgICAgIDxoMz4xMS4xIFZhbHVlIEFkZGVkIFRheCAoVkFUKTwvaDM+CiAgICAgIDxwPlJlbnQgc2hhbGwgYmUgZXhjbHVzaXZlIG9mIFZBVCBhbmQgdGhlIExhbmRsb3JkIHNoYWxsIGZvciB0aGUgcHVycG9zZXMgb2YgdGhpcyBBZ3JlZW1lbnQgYmUgcmVzcG9uc2libGUgZm9yIHJlbWl0dGluZyB0byB0aGUgS2VueWEgUmV2ZW51ZSBBdXRob3JpdHkuPC9wPgogICAgPC9zZWN0aW9uPgoKICAgIDxzZWN0aW9uPgogICAgICA8aDI+RGF0YSBQcm90ZWN0aW9uPC9oMj4KICAgICAgPHA+VGhlIHBhcnRpZXMgd2lsbCBkdXJpbmcgdGhlIFRlcm0gY29tcGx5IHdpdGggdGhlIERhdGEgUHJvdGVjdGlvbiBBY3QgYW5kIHJlZ3VsYXRpb25zIHRoZXJldW5kZXIuPC9wPgogICAgPC9zZWN0aW9uPgoKICAgIDxzZWN0aW9uPgogICAgICA8aDI+R2VuZXJhbDwvaDI+CiAgICAgIDxwPlRoZSBMYW5kbG9yZCBhZ3JlZXMgdGhhdCB3aGVyZSB0aGUgTGFuZGxvcmQncyBjb25zZW50IG9yIGFwcHJvdmFsIGlzIHJlcXVpcmVkIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGlzIEFncmVlbWVudC48L3A+CiAgICA8L3NlY3Rpb24+CgogICAgPGhyLz4KCiAgICA8c2VjdGlvbj4KICAgICAgPGgyPlRoZSBGaXJzdCBTY2hlZHVsZTwvaDI+CiAgICAgIDxwPjxzdHJvbmc+VGhlIENvbW1lbmNlbWVudCBEYXRlOjwvc3Ryb25nPgogICAgICAgIDxzcGFuIGNsYXNzPSJmaWxsIiBjb250ZW50ZWRpdGFibGU9InRydWUiIGRhdGEtcGg9IltDb21tZW5jZW1lbnQgRGF0ZV0iPjwvc3Bhbj4KICAgICAgPC9wPgogICAgICA8cD48c3Ryb25nPlRoZSBMYW5kOjwvc3Ryb25nPiBhbGwgdGhlIExhbmRsb3JkJ3MgbGFuZCBrbm93biBhcwogICAgICAgIDxzcGFuIGNsYXNzPSJmaWxsIiBjb250ZW50ZWRpdGFibGU9InRydWUiIGRhdGEtcGg9IltMYW5kIGRlc2NyaXB0aW9uIC8gVGl0bGVdIj48L3NwYW4+CiAgICAgIDwvcD4KCiAgICAgIDxoMz5UaGUgUmVudDwvaDM+CiAgICAgIDx0YWJsZT4KICAgICAgICA8dGhlYWQ+CiAgICAgICAgICA8dHI+CiAgICAgICAgICAgIDx0aD5ZZWFyPC90aD4KICAgICAgICAgICAgPHRoPkFtb3VudCBpbiB3b3JkczwvdGg+CiAgICAgICAgICAgIDx0aD5BbW91bnQgaW4gZmlndXJlczwvdGg+CiAgICAgICAgICA8L3RyPgogICAgICAgIDwvdGhlYWQ+CiAgICAgICAgPHRib2R5PgogICAgICAgICAgPHRyPgogICAgICAgICAgICA8dGQ+Rmlyc3QgWWVhcjwvdGQ+CiAgICAgICAgICAgIDx0ZD48c3BhbiBjbGFzcz0iYmxvY2stZmlsbCIgY29udGVudGVkaXRhYmxlPSJ0cnVlIiBkYXRhLXBoPSJbS2VueWEgU2hpbGxpbmdzIGluIHdvcmRzXSI+PC9zcGFuPjwvdGQ+CiAgICAgICAgICAgIDx0ZD5LLlNocyUgPHNwYW4gY2xhc3M9ImZpbGwiIGNvbnRlbnRlZGl0YWJsZT0idHJ1ZSIgZGF0YS1waD0iW0Ftb3VudC89XSI+PC9zcGFuPjwvdGQ+CiAgICAgICAgICA8L3RyPgogICAgICAgIDwvdGJvZHk+CiAgICAgIDwvdGFibGU+CiAgICA8L3NlY3Rpb24+CgogICAgPHNlY3Rpb24+CiAgICAgIDxoMj5TZWNvbmQgU2NoZWR1bGU8L2gyPgogICAgICA8aDM+Rm9ybSBvZiBMZWFzZTwvaDM+CiAgICAgIDxwIGNsYXNzPSJzbWFsbCBtdXRlZCI+W0F0dGFjaCBvciBpbnNlcnQgdGhlIGZpbmFsIGZvcm0gb2YgdGhlIExlYXNlIGhlcmUgaWYgcmVxdWlyZWQuXTwvcD4KICAgICAgPGRpdiBjbGFzcz0iYmxvY2stZmlsbCIgY29udGVudGVkaXRhYmxlPSJ0cnVlIiBkYXRhLXBoPSJbUGFzdGUgb3IgZHJhZnQgdGhlIExlYXNlIGZvcm0gaGVyZV0iPjwvZGl2PgogICAgPC9zZWN0aW9uPgoKICAgIDxzZWN0aW9uPgogICAgICA8aDI+VGhpcmQgU2NoZWR1bGU8L2gyPgogICAgICA8aDM+UGxhbjwvaDM+CiAgICAgIDxwIGNsYXNzPSJzbWFsbCBtdXRlZCI+W0F0dGFjaCB0aGUgcGxhbiBvZiB0aGUgUHJlbWlzZXMuXTwvcD4KICAgIDwvc2VjdGlvbj4KCiAgICA8aHIvPgoKICAgIDxzZWN0aW9uPgogICAgICA8aDI+RXhlY3V0aW9uPC9oMj4KCiAgICAgIDx0YWJsZSBjbGFzcz0ic2lnLWdyaWQiPgogICAgICAgIDx0cj4KICAgICAgICAgIDx0ZCBjbGFzcz0ic2lnLWNlbGwiPgogICAgICAgICAgICA8cCBjbGFzcz0iY2FwcyI+PHN0cm9uZz5TaWduZWQgYnkgTGFuZGxvcmQ8L3N0cm9uZz48L3A+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsaW5lIj48L3NwYW4+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImxhYmVsIj5TaWduYXR1cmUgb2YgTGFuZGxvcmQ8L2Rpdj4KCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsaW5lIj48L3NwYW4+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImxhYmVsIj5OYW1lPC9kaXY+CiAgICAgICAgICA8L3RkPgoKICAgICAgICAgIDx0ZCBjbGFzcz0ic2lnLWNlbGwiPgogICAgICAgICAgICA8cCBjbGFzcz0iY2FwcyI+PHN0cm9uZz5TaWduZWQgYnkgU0FGQVJJQ09NIFBMQZM8L3N0cm9uZz48L3A+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsaW5lIj48L3NwYW4+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImxhYmVsIj5TaWduYXR1cmUgb2YgQXV0aG9yaXplZCBSZXByZXNlbnRhdGl2ZTwvZGl2PgogICAgICAgICAgPC90ZD4KICAgICAgICA8L3RyPgogICAgICA8L3RhYmxlPgogICAgPC9zZWN0aW9uPgogIDwvbWFpbj4KPC9ib2R5Pgo8L2h0bWw+Cg==', 'base64'),
  true
);

-- Insert Lease Agreement template
INSERT INTO public.system_templates (
  name,
  description,
  category,
  file_name,
  content_type,
  file_data,
  is_active
) VALUES (
  'Lease Agreement - Safaricom BTS',
  'Comprehensive lease agreement template for Safaricom Base Transceiver Station sites. Includes rent schedules, covenants, and execution clauses.',
  'agreements',
  'Lease_Agreement_Template.html',
  'text/html',
  decode('', 'base64'),
  true
);

-- Insert Licence Agreement template
INSERT INTO public.system_templates (
  name,
  description,
  category,
  file_name,
  content_type,
  file_data,
  is_active
) VALUES (
  'Licence Agreement - Peppercorn',
  'Licence agreement template for peppercorn rent arrangements. Suitable for rooftop and building installations.',
  'agreements',
  'Licence_Agreement_Peppercorn.html',
  'text/html',
  decode('PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KPGhlYWQ+CjxtZXRhIGNoYXJzZXQ9InV0Zi04Ij4KPHR0bGU+TGljZW5jZSBBZ3JlZW1lbnQg4oCTIEZpbGxhYmxlIChQZXBwZXJjb3JuKTwvdGl0bGU+CjxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MSI+CjxzdHlsZT4KICA6cm9vdHsgLS1mb250OiJUaW1lcyBOZXcgUm9tYW4iLCBzZXJpZjsgfQogIGh0bWwsYm9keXttYXJnaW46MDtiYWNrZ3JvdW5kOiNmNmY2ZjZ9CiAgYm9keXtmb250LWZhbWlseTp2YXIoLS1mb250KTtsaW5lLWhlaWdodDoxLjM7Y29sb3I6IzExMX0KICAuY29udGFpbmVye21heC13aWR0aDo5MDBweDttYXJnaW46MjRweCBhdXRvO3BhZGRpbmc6MjRweDtiYWNrZ3JvdW5kOiNmZmY7Ym94LXNoYWRvdzowIDAgMCAxcHggI2VjZWNlY30KICA=', 'base64'),
  true
);

-- Insert Letter of Offer template
INSERT INTO public.system_templates (
  name,
  description,
  category,
  file_name,
  content_type,
  file_data,
  is_active
) VALUES (
  'Letter of Offer - Site Acquisition',
  'Professional letter of offer template for site acquisition. Includes all terms, conditions, and acceptance clauses.',
  'letters',
  'Letter_of_Offer_Template.html',
  'text/html',
  decode('PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KPGhlYWQ+CjxtZXRhIGNoYXJzZXQ9InV0Zi04Ij4KPHR0bGU+TGV0dGVyIG9mIE9mZmVyIOKAkyBGaWxsYWJsZTwvdGl0bGU+CjxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MSI+CjxzdHlsZT4KICA6cm9vdHsgLS1mb250OiJUaW1lcyBOZXcgUm9tYW4iLCBzZXJpZjsgfQogIGh0bWwsYm9keXttYXJnaW46MDtiYWNrZ3JvdW5kOiNmNmY2ZjZ9CiAgYm9keXtmb250LWZhbWlseTp2YXIoLS1mb250KTtsaW5lLWhlaWdodDoxLjM7Y29sb3I6IzExMX0KICAuY29udGFpbmVye21heC13aWR0aDo5MDBweDttYXJnaW46MjRweCBhdXRvO3BhZGRpbmc6MjRweDtiYWNrZ3JvdW5kOiNmZmY7Ym94LXNoYWRvdzowIDAgMCAxcHggI2VjZWNlY30KICA=', 'base64'),
  true
);